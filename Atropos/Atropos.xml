<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atropos</name>
    </assembly>
    <members>
        <member name="T:Atropos.IImmutableDeque`1">
            <summary>
            Represents an immutable Deque - i.e. the two-ended queue that supports push/pop operations from both ends with an amortized cost ot O(1) per operation.
            </summary>
            <typeparam name="T">The type of the Deque elements</typeparam>
        </member>
        <member name="P:Atropos.IImmutableDeque`1.Left">
            <summary>
            Peeks the leftmost element in the deque
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the deque is empty</exception>
        </member>
        <member name="P:Atropos.IImmutableDeque`1.Right">
            <summary>
            Peeks the rightmost element in the deque
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the deque is empty</exception>
        </member>
        <member name="M:Atropos.IImmutableDeque`1.EnqueueLeft(`0)">
            <summary>
            Enqueues the specified element to the left of the deque
            </summary>
            <param name="value">The value to enqueue</param>
            <returns>A new <see cref="T:Atropos.IImmutableDeque`1"/> that contains the same elements as this deque, plus the <paramref name="value"/> pushed from the left</returns>
        </member>
        <member name="M:Atropos.IImmutableDeque`1.EnqueueRight(`0)">
            <summary>
            Enqueues the specified element to the right of the deque
            </summary>
            <param name="value">The value to enqueue</param>
            <returns>A new <see cref="T:Atropos.IImmutableDeque`1"/> that contains the same elements as this deque, plus the <paramref name="value"/> pushed from the right</returns>
        </member>
        <member name="M:Atropos.IImmutableDeque`1.DequeueLeft">
            <summary>
            Removes one element from deque's left.
            </summary>
            <returns>A new <see cref="T:Atropos.IImmutableDeque`1"/> that contains all the elements of this deque, except for the leftmost one</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the deque is empty</exception>
        </member>
        <member name="M:Atropos.IImmutableDeque`1.DequeueRight">
            <summary>
            Removes one element from deque's right
            </summary>
            <returns>A new <see cref="T:Atropos.IImmutableDeque`1"/> that contains all the elements of this deque, except for the rightmost one</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the deque is empty</exception>
        </member>
        <member name="M:Atropos.IImmutableDeque`1.Concat(Atropos.IImmutableDeque{`0})">
            <summary>
            Concatenates two deques together.
            </summary>
            <param name="right">The deque to concatenate to the right</param>
            <returns></returns>
        </member>
        <member name="M:Atropos.IImmutableDeque`1.Clear">
            <summary>
            Returns a new immutable deque with the same element type as this one, but empty
            </summary>
            <returns>A new immutable deque with the same element type as this one, but empty</returns>
        </member>
        <member name="T:Atropos.ImmutableDeque">
            <summary>
            Helper class for the <see cref="T:Atropos.ImmutableDeque`1"/>
            </summary>
        </member>
        <member name="M:Atropos.ImmutableDeque.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Initializes a new immutable deque to the list of items passed
            </summary>
            <typeparam name="T">Type of the deque element</typeparam>
            <param name="items">The collection to use for initialization</param>
            <returns>If the passed argument is <see cref="T:Atropos.IImmutableDeque`1"/> then returns it without change.
            Otherwise a new <see cref="T:Atropos.ImmutableDeque`1"/>  created from the items passed in the <paramref name="items"/> argument.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="items"/> is null</exception>
        </member>
        <member name="M:Atropos.ImmutableDeque.AddRange``1(Atropos.IImmutableDeque{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of item to the right of this queue
            </summary>
            <typeparam name="T">Type of the deque element</typeparam>
            <param name="deque">The deque</param>
            <param name="items">The list of items to enqueue on the right</param>
            <returns>If the <paramref name="items"/> collection is empty, then the original <paramref name="deque"/> is returned.
            If the <paramref name="items"/> is another <see cref="T:Atropos.IImmutableDeque`1"/>, then the <see cref="M:Atropos.IImmutableDeque`1.Concat(Atropos.IImmutableDeque{`0})"/> method is used.
            Otherwise, <paramref name="items"/> are fed one by one into the <see cref="M:Atropos.IImmutableDeque`1.EnqueueRight(`0)"/> method.
            </returns>
        </member>
        <member name="T:Atropos.ImmutableDeque`1">
            <summary>
            An efficient implementation of the <see cref="T:Atropos.IImmutableDeque`1"/> based on the Eric Lippert's deque, which is based on the Hughes lists.
            See also https://docs.microsoft.com/en-us/archive/blogs/ericlippert/immutability-in-c-part-eleven-a-working-double-ended-queue
            </summary>
            <typeparam name="T">The type of deque elements</typeparam>
        </member>
        <member name="P:Atropos.ImmutableDeque`1.Empty">
            <summary>
            An empty deque of <typeparamref name="T"/>
            </summary>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.GetEnumerator">
            <summary>
            Traverses this deque from left to right
            </summary>
            <returns>The enumerator that traverses this deque from left to right</returns>
        </member>
        <member name="P:Atropos.ImmutableDeque`1.IsEmpty">
            <summary>
            Implements <see cref="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty"/>. Always false for this class - we have a separate internal class for an empty deque.
            </summary>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.Dequeue">
            <summary>
            Implements the <see cref="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue"/>, synonym for <see cref="M:Atropos.IImmutableDeque`1.DequeueLeft"/>
            </summary>
            <returns>A new <see cref="T:Atropos.ImmutableDeque`1"/> with the leftmost element removed.</returns>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.Enqueue(`0)">
            <summary>
            Implements the <see cref="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)"/>, synonym for <see cref="M:Atropos.IImmutableDeque`1.EnqueueRight(`0)"/>
            </summary>
            <param name="value">The value to enqueue</param>
            <returns>A new <see cref="T:System.Collections.Immutable.ImmutableQueue`1"/> that contains the same elements as this queue plus the <paramref name="value"/> as the rightmost element</returns>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.Peek">
            <summary>
            Peeks the element on the left of the queue without removing it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.EnqueueLeft(`0)">
            <summary>
            Enqueues the specified element to the left of the deque
            </summary>
            <param name="value">The value to enqueue</param>
            <returns>A new <see cref="T:Atropos.ImmutableDeque`1"/> that contains the same elements as this deque, plus the <paramref name="value"/> pushed from the left</returns>
            <remarks>
            The cost of this operation varies depending on the deque size; but the amortized cost is O(1).
            </remarks>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.EnqueueRight(`0)">
            <summary>
            Enqueues the specified element to the right of the deque
            </summary>
            <param name="value">The value to enqueue</param>
            <returns>A new <see cref="T:Atropos.ImmutableDeque`1"/> that contains the same elements as this deque, plus the <paramref name="value"/> pushed from the right</returns>
            <remarks>
            The cost of this operation varies depending on the deque size; but the amortized cost is O(1).
            </remarks>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.DequeueLeft">
            <summary>
            Removes one element from deque's left
            </summary>
            <returns>A new <see cref="T:Atropos.IImmutableDeque`1"/> that contains all the elements of this deque, except for the leftmost one</returns>
            <remarks>
            The cost of this operation varies depending on the deque size; but the amortized cost is O(1).
            </remarks>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.DequeueRight">
            <summary>
            Removes one element from deque's right
            </summary>
            <returns>A new <see cref="T:Atropos.IImmutableDeque`1"/> that contains all the elements of this deque, except for the rightmost one</returns>
            <remarks>
            The cost of this operation varies depending on the deque size; but the amortized cost is O(1).
            </remarks>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.Concat(Atropos.IImmutableDeque{`0})">
            <summary>
            Concatenates the specified deque to the right of this one.
            </summary>
            <param name="other">The other deque</param>
            <returns></returns>
        </member>
        <member name="M:Atropos.ImmutableDeque`1.Clear">
            <summary>
            Returns a new queue with all the elements removed.
            </summary>
            <returns>An empty immutable queue.</returns>
        </member>
        <member name="P:Atropos.ImmutableDeque`1.Left">
            <summary>
            Peeks the leftmost element of the deque
            </summary>
        </member>
        <member name="P:Atropos.ImmutableDeque`1.Right">
            <summary>
            Peeks the rightmost element of the deque
            </summary>
        </member>
        <member name="T:Atropos.ImmutableDictionary`2">
            <summary>
            Represents an immutable key-value dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.#ctor">
            <summary>
            Constructs an immutable dictionary.
            </summary>
        </member>
        <member name="P:Atropos.ImmutableDictionary`2.Item(`0)">
            <summary>
            Returns the value by the given key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the given key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the given key is not present in the dictionary.</exception>
        </member>
        <member name="P:Atropos.ImmutableDictionary`2.Keys">
            <summary>
            Returns an enumeration of all the keys in this dictionary.
            </summary>
        </member>
        <member name="P:Atropos.ImmutableDictionary`2.Count">
            <summary>
            Returns count of the elements in the <see cref="T:Atropos.ImmutableDictionary`2"/>
            </summary>
        </member>
        <member name="P:Atropos.ImmutableDictionary`2.Values">
            <summary>
            Returns an enumeration of all the values in this dictionary.
            </summary>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the specified key and value to the immutable dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <returns>A new immutable dictionary that contains the additional key/value pair.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the given key is null</exception>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds the specified key/value pairs to the immutable dictionary.
            </summary>
            <param name="pairs">The key/value pairs to add.</param>
            <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.SetItem(`0,`1)">
            <summary>
            Sets the specified key and value to the dictionary, possibly overwriting an existing value for the given key.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add.</param>
            <returns>The new dictionary containing the additional key-value pair.</returns>
            <remarks>
            If the given key-value pair are already in the dictionary, the existing instance is returned.
            If the key already exists but with a different value, a new instance with the overwritten value will be returned.
            </remarks>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Applies a given set of key=value pairs to an immutable dictionary, replacing any conflicting keys in the resulting dictionary.
            </summary>
            <param name="items">The key=value pairs to set on the dictionary.  Any keys that conflict with existing keys will overwrite the previous values.</param>
            <returns>An immutable dictionary.</returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.Clear">
            <summary>
            Retrieves an empty immutable dictionary.
            </summary>
            <returns>An empty immutable dictionary.</returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key from the dictionary with its associated value.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>A new dictionary with the matching entry removed; or this instance if the key is not in the dictionary.</returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified keys from the dictionary with their associated values.
            </summary>
            <param name="keys">The keys to remove.</param>
            <returns>A new dictionary with those keys removed; or this instance if those keys are not in the dictionary.</returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether this immutable dictionary contains the specified key/value pair.
            </summary>
            <param name="pair">TThe key/value pair to locate.</param>
            <returns><c>true</c> if the specified key/value pair is found in the dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the immutable dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
            <c>true</c> if the immutable dictionary contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the immutable dictionary.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the dictionary.
            </returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Searches the dictionary for the value by the given key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A value indicating whether the search was successful.</returns>
        </member>
        <member name="M:Atropos.ImmutableDictionary`2.TryGetKey(`0,`0@)">
            <summary>
            Searches the dictionary for a given key and returns the equal key it finds, if any.
            </summary>
            <param name="equalKey">The key to search for.</param>
            <param name="actualKey">The key from the dictionary that the search found, or <paramref name="equalKey"/> if the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
            <remarks>
            This can be useful when you want to reuse a previously stored reference instead of
            a newly constructed one (so that more sharing of references can occur) or to look up
            the canonical value, or a value that has more complete data than the value you currently have,
            although their comparer functions indicate they are equal.
            </remarks>
        </member>
        <member name="T:Atropos.ImmutableList">
            <summary>
            Helper class with the extension methods for the <see cref="T:Atropos.ImmutableList`1"/> class.
            </summary>
        </member>
        <member name="M:Atropos.ImmutableList.Init``1(``0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atropos.ImmutableList`1"/> class
            </summary>
            <typeparam name="T">Immutable list element type, inferred automatically from the <paramref name="item"/>parameter</typeparam>
            <param name="item">value of the element(s) to repeat <paramref name="count"/> times</param>
            <param name="count">The number of times to repeat the provided <paramref name="item"/></param>
            <returns>A new immutable list that contains <paramref name="count"/> instances of <paramref name="item"/></returns>
        </member>
        <member name="M:Atropos.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Initializes a new <see cref="T:Atropos.ImmutableList`1"/> with the specified <paramref name="items"/>.
            </summary>
            <typeparam name="T">Type of the list items</typeparam>
            <param name="items">Collection of items to initialize</param>
            <returns>A new <see cref="T:Atropos.ImmutableList`1"/> that contais all the items from <paramref name="items"/> in the same order.</returns>
        </member>
        <member name="M:Atropos.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an <see cref="T:Atropos.ImmutableList`1"/> from <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Type of the list items</typeparam>
            <param name="items">Collection of items to initialize</param>
            <returns>An <see cref="T:Atropos.ImmutableList`1"/> that contais all the elements of the input sequence.</returns>
            <remarks>Implementation is eager. Do not call on the infinite sequences.</remarks>
        </member>
        <member name="M:Atropos.ImmutableList.Add``2(Atropos.ImmutableList{``0},``1)">
            <summary>
            Makes a copy of the list, and adds the specified <paramref name="value"/> to the end of the copied list.
            </summary>
            <typeparam name="T">Type of the original list items</typeparam>
            <typeparam name="B">Type of the value to add</typeparam>
            <param name="list">Original list</param>
            <param name="value">The object to add to the list</param>
            <returns>A new list with the object added</returns>
            <remarks>Warning: the operation asymptotic is O(<paramref name="list"/>.Count), as we have to clone the list.
            Reusing the nodes of the original list is impossible due to the limitations of the C# type system: Node&lt;<typeparamref name="T"/>&gt; cannot be made covariant, and 
            storing INode&lt;<typeparamref name="T"/>&gt; would kill the performance due to the indirect call.</remarks>
        </member>
        <member name="M:Atropos.ImmutableList.Insert``2(Atropos.ImmutableList{``0},System.Int32,``1)">
            <summary>
            Makes a copy of the list, and inserts the specified <paramref name="value"/> at the specified <paramref name="index"/>.
            </summary>
            <typeparam name="T">Type of the original list items</typeparam>
            <typeparam name="B">Type of the value to add</typeparam>
            <param name="list">Original list</param>
            <param name="index">Position of the insertion</param>
            <param name="value">The object to insert into the list</param>
            <returns>A new list with the object added</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <paramref name="index"/> is outside of the <paramref name="list"/> bounds.</exception>
            <remarks>Warning: the operation asymptotic is O(<paramref name="list"/>.Count), as we have to clone the list.
            Reusing the nodes of the original list is impossible due to the limitations of the C# type system: Node&lt;<typeparamref name="T"/>&gt; cannot be made covariant, and 
            storing INode&lt;<typeparamref name="T"/>&gt; would kill the performance due to the indirect call.</remarks>
        </member>
        <member name="M:Atropos.ImmutableList.SetItem``2(Atropos.ImmutableList{``0},System.Int32,``1)">
            <returns>A new list that contains the new element</returns>
            <summary>
            Makes a copy of the list, and replaces an element in the list at a given position with the specified element.
            </summary>
            <typeparam name="T">Type of the original list items</typeparam>
            <typeparam name="B">Type of the new element</typeparam>
            <param name="list">Original list</param>
            <param name="index">The position in the list of the element to replace.</param>
            <param name="value">The element to replace the old element with.</param>
            <returns>A new list with the object added</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <paramref name="index"/> is outside of the <paramref name="list"/> bounds.</exception>
            <remarks>Warning: the operation asymptotic is O(<paramref name="list"/>.Count), as we have to clone the list.
            Reusing the nodes of the original list is impossible due to the limitations of the C# type system: Node&lt;<typeparamref name="T"/>&gt; cannot be made covariant, and 
            storing INode&lt;<typeparamref name="T"/>&gt; would kill the performance due to the indirect call.</remarks>
        </member>
        <member name="T:Atropos.ImmutableList`1">
            <summary>
            Immutable list
            </summary>
            <typeparam name="T">Type of the list elements</typeparam>
        </member>
        <member name="P:Atropos.ImmutableList`1.Empty">
            <summary>
            Returns an empty <see cref="T:Atropos.ImmutableList`1"/>
            </summary>
        </member>
        <member name="M:Atropos.ImmutableList`1.Clear">
            <summary>
            Clears the list
            </summary>
            <returns>A new immutable list of the same type as this, but with no elements</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the first 
            occurrence within the range of elements in the list
            that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">Object to find</param>
            <param name="index">Zero-based start index</param>
            <param name="count">The length of the search range</param>
            <param name="equalityComparer">The comparer to use for comparing items with <paramref name="item"/></param>
            <returns>The zero-based index of the first occurrence of item within the range of elements
            in the <see cref="T:Atropos.ImmutableList`1"/> that starts at <paramref name="index"/> and contains <paramref name="count"/> number 
            of elements if found; otherwise -1.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when requested <paramref name="index"/> is below zero or (<paramref name="index"/>+<paramref name="count"/>) is above <see cref="P:Atropos.ImmutableList`1.Count"/>-1.</exception>
        </member>
        <member name="M:Atropos.ImmutableList`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the first 
            occurrence within the range of elements in the list
            that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">Object to find</param>
            <param name="equalityComparer">The comparer to use for comparing items with <paramref name="item"/></param>
            <returns>The zero-based index of the first occurrence of item within the <see cref="T:Atropos.ImmutableList`1"/> if found; otherwise -1.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within 
            the range of elements in the <see cref="T:Atropos.ImmutableList`1"/>
            that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the list. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count"> The number of elements in the section to search.</param>
            <param name="equalityComparer">The equality comparer to use when searching for the <paramref name="item"/>.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements
            in the <see cref="T:Atropos.ImmutableList`1"/> that starts at <paramref name="index"/> and contains <paramref name="count"/> number 
            of elements if found; otherwise -1.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when requested <paramref name="index"/> is below zero or (<paramref name="index"/>+<paramref name="count"/>) is above <see cref="P:Atropos.ImmutableList`1.Count"/>-1.</exception>
        </member>
        <member name="M:Atropos.ImmutableList`1.LastIndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within 
            the <see cref="T:Atropos.ImmutableList`1"/>.
            </summary>
            <param name="item">The object to locate in the list. The value can be null for reference types.</param>
            <param name="equalityComparer">The equality comparer to use when searching for the <paramref name="item"/>.</param>
            <returns>The zero-based index of the last occurrence of item within the <see cref="T:Atropos.ImmutableList`1"/> if found; otherwise -1.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the first occurrence of a specified object from this immutable list.
            </summary>
            <param name="value">The object to remove from the list.</param>
            <param name="equalityComparer">Equality comparer to use when searching for <paramref name="value"/>.</param>
            <returns>A new immutable list with the specified object removed</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to remove.</param>
            <returns>A new immutable list with the elements removed.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the immutable list.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <returns>A new immutable list with the element removed.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns a new list with the first matching element in the list replaced with the specified element.
            </summary>
            <param name="oldValue">The element to be replaced.</param>
            <param name="newValue">The element to replace the first occurrence of <paramref name="oldValue"/> with</param>
            <param name="equalityComparer"> The equality comparer to use for matching <paramref name="oldValue"/>.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"><paramref name="oldValue"/> does not exist in the list.</exception>
        </member>
        <member name="M:Atropos.ImmutableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified value at the specified index
            </summary>
            <param name="index">Location of the element to insert</param>
            <param name="value">Value of the element to insert</param>
            <returns>a new <see cref="T:Atropos.ImmutableList`1"/> with the specified <paramref name="value"/> inserted at the specified <paramref name="index"/></returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown in case <paramref name="index"/> is outside of the list bounds.</exception> 
        </member>
        <member name="M:Atropos.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the specified elements at the specified index in the immutable list.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="items">The elements to insert.</param>
            <returns>A new immutable list that includes the specified elements.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <paramref name="index"/>is out of list bounds.</exception>
        </member>
        <member name="M:Atropos.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the specified objects from the list.
            </summary>
            <param name="items">The objects to remove from the list.</param>
            <param name="equalityComparer">The comparer to use when searchign for <paramref name="items"/>.</param>
            <returns> A new immutable list with the specified objects removed, if items matched objects in the list.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:Atropos.ImmutableList`1"/>
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <returns>A new immutable list with the elements removed.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the requested range crosses the list boundaries.</exception>
        </member>
        <member name="P:Atropos.ImmutableList`1.Item(System.Int32)">
            <summary>
            Returns an element from the list. Asympthotic is O(log(<see cref="P:Atropos.ImmutableList`1.Count"/>)).
            </summary>
            <param name="index">The zero-based index of the element to return</param>
            <returns>The value at the requested <paramref name="index"/></returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when requested <paramref name="index"/>  is below zero or above <see cref="P:Atropos.ImmutableList`1.Count"/>-1.</exception>
        </member>
        <member name="P:Atropos.ImmutableList`1.Count">
            <summary>
            Returns count of the elements in the <see cref="T:Atropos.ImmutableList`1"/>
            </summary>
        </member>
        <member name="M:Atropos.ImmutableList`1.GetEnumerator">
            <summary>
            Returns the list enumerator
            </summary>
            <returns>The list enumerator</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.#ctor(`0,System.Int32)">
            <summary>
            Constructs a list from the value
            </summary>
            <param name="value">The value of the list element</param>
            <param name="count">The count of elements to create</param>
        </member>
        <member name="M:Atropos.ImmutableList`1.#ctor">
            <summary>
            Creates a new empty immutable list
            </summary>
        </member>
        <member name="M:Atropos.ImmutableList`1.Add(`0)">
            <summary>
            Makes a copy of the list, and adds the specified object to the end of the copied list.
            </summary>
            <param name="value">The object to add to the list</param>
            <returns>A new list with the object added</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the immutable list
            </summary>
            <param name="values">The list of items to add</param>
            <returns>A new immutable list equal to the original list with the <paramref name="values"/> added at the end.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces an element in the list at a given position with the specified element.
            </summary>
            <param name="index">The position in the list of the element to replace.</param>
            <param name="value">The element to replace the old element with.</param>
            <returns>A new list that contains the new element</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_Addition(Atropos.ImmutableList{`0},System.ValueTuple{System.Int32,`0})">
            <summary>
            Inserion operator - inserts the specified value at the specified index.
            Convenient for the compound assignment operator:
            list = list.Insert(index, value) &lt;=&gt; list += (index, value)
            </summary>
            <param name="list">The immutable list</param>
            <param name="param">The pair of (index, value)</param>
            <returns>The new immutable list with the <paramref name="param"/>.value inserted at the <paramref name="param"/>.index.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_Addition(Atropos.ImmutableList{`0},`0)">
            <summary>
            Addition operator - adds the specified value to the immutable list.
            Convenient in the compound assignment operator:
            list = list.Add(value) &lt;=&gt; list += value
            </summary>
            <param name="list">The immutable list</param>
            <param name="value">The value to add to the end of the list</param>
            <returns>The new immutable list with the <paramref name="value"/> inserted at the end.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_Subtraction(Atropos.ImmutableList{`0},`0)">
            <summary>
            Removal operator - removes the first occurence of the specified value from the list, using the default equality comparer.
            Convenient in the compound assignment operator:
            list = list.Remove(item, null) &lt;=&gt; list -= item;
            </summary>
            <param name="list">The immutable list</param>
            <param name="value">Value to remove from the list</param>
            <returns>A new list with the first occurence of <paramref name="value"/> removed.</returns>
            <remarks>Note that for ImmutableList&lt;<see cref="T:System.Int32"/>&gt; this operator overlaps with the <see cref="M:Atropos.ImmutableList`1.op_Subtraction(Atropos.ImmutableList{`0},System.Int32)"/> and loses.
            To remove some value from an <see cref="T:Atropos.ImmutableList`1"/> where T is <see cref="T:System.Int32"/> use the <see cref="M:Atropos.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})"/> method explicitly.
            </remarks>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_Subtraction(Atropos.ImmutableList{`0},System.ValueTuple{`0,System.Collections.Generic.IEqualityComparer{`0}})">
            <summary>
            Removal operator - removes the first occurence of the specified value from the list, using the specified equality comparer.
            Convenient in the compound assignment operator:
            list = list.Remove(item, comparer) &lt;=&gt; list -= (item, comparer);
            </summary>
            <param name="list">The immutable list</param>
            <param name="param">Item to remove from the list:
            - <paramref name="param"/>.value - the value to remove
            - <paramref name="param"/>.comparer - the comparer to use
            </param>
            <returns>A new list with the first occurence of <paramref name="param"/>. removed.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_Subtraction(Atropos.ImmutableList{`0},System.Int32)">
            <summary>
            Removal operator - removes item at the specified position. 
            Convenient in the compound assignment operator:
            list = list.RemoveAt(index) &lt;=&gt; list -= index;
            </summary>
            <param name="list">The immutable list</param>
            <param name="index">Index of an item to remove from the list</param>
            <remarks>Note that for ImmutableList&lt;<see cref="T:System.Int32"/>&gt; this operator overlaps with the <see cref="M:Atropos.ImmutableList`1.op_Subtraction(Atropos.ImmutableList{`0},`0)"/> and wins.
            To remove some value from an <see cref="T:Atropos.ImmutableList`1"/> where T is <see cref="T:System.Int32"/> use the <see cref="M:Atropos.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})"/> method explicitly.</remarks>
            <returns>A new <see cref="T:Atropos.ImmutableList`1"/> with the specified item removed.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_Addition(Atropos.ImmutableList{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Addition operator - adds the specified range of items to the immutable list.
            Convenient in the compound assignment operator:
            <code>list = list.AddRange(items) &lt;=&gt; list += items;</code>
            </summary>
            <param name="list">Immutable list</param>
            <param name="items">The items to add </param>
            <returns>A new <see cref="T:Atropos.ImmutableList`1"/> with the <paramref name="items"/> appended to the end of the <paramref name="list"/>.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_Subtraction(Atropos.ImmutableList{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removal operator - removes the specified items from the immutable list, using the default equality comparer
            </summary>
            <param name="list">Immutable list</param>
            <param name="items">Items to remove</param>
            <returns>A new <see cref="T:Atropos.ImmutableList`1"/> with the specified items excluded.</returns>
        </member>
        <member name="M:Atropos.ImmutableList`1.op_BitwiseOr(Atropos.ImmutableList{`0},System.ValueTuple{System.Int32,`0})">
            <summary>
            Mutation operator - sets the item at the specified index to the specified value.
            Convenient in the compound assignment operator; especially when the <typeparamref name="T"/> is itself immutable.
            The following two code fragment
            <code>
            list = list.SetItem(index, list[index].Add(item));
            </code>
            is equivalent to 
            <code>
            list |= (index, list[index]+item);
            </code>
            </summary>
            <param name="list"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
    </members>
</doc>
